package org.lsmr.vendingmachine.simulator;

import java.util.Timer;
import java.util.TimerTask;


/**
 * Represents a standard configuration of the vending machine hardware:
 * <ul>
 * <li>one coin slot;</li>
 * <li>one coin receptacle (called the coin receptacle) to temporarily store
 * coins entered by the user;</li>
 * <li>one coin receptacle (called the storage bin) to store coins that have
 * been accepted as payment;</li>
 * <li>one delivery chute used to deliver pop cans and to return coins;</li>
 * <li>a set of zero or more pop can racks (the number, cost, and pop name
 * stored in each is specified in the constructor);</li>
 * <li>one textual display;</li>
 * <li>a set of zero or more selection buttons (exactly one per pop can rack);</li>
 * <li>a selection button to return entered coins to the user;
 * and</li>
 * <li>one indicator light to indicate that the machine is out of order.</li>
 * </ul>
 * <p>
 * The component devices are interconnected as follows:
 * <ul>
 * <li>the output of the coin slot is connected to the input of the coin
 * receptacle;</li>
 * <li>the outputs of the coin receptacle are connected to the input of the
 *  the delivery chute (for invalid coins or other coins to be returned) and 
 *  the storage bin (for coins to be accepted as payment);</li>
 * <li>and</li>
 * <li>the output of each pop can rack is connected to the delivery chute.</li>
 * </ul>
 * <p>
 * Each component device can be disabled to prevent any physical movements.
 * Other functionality is not affected by disabling a device; hence devices that
 * do not involve physical movements are not affected by "disabling" them.
 * <p>
 * Most component devices have some sort of maximum capacity (e.g., of the
 * number of pop cans that can be stored therein). In some cases, this is a
 * simplification of the physical reality for the sake of simulation.
 */
public class HardwareSimulator implements CoinReceptacleListener, SelectionButtonSimulatorListener {
    private boolean safetyOn = false;

    private CoinSlotSimulator coinSlot;
    private CoinReceptacleSimulator receptacle, storageBin;
    private DeliveryChuteSimulator deliveryChute;
    private PopCanRackSimulator[] popCanRacks;
    private DisplaySimulator display;
    private SelectionButtonSimulator[] buttons;
    private SelectionButtonSimulator returnButton;
    private IndicatorLightSimulator outOfOrderLight;

    protected static int deliveryChuteCapacity = 20;
    //this is set high to ensure that this case will not occur often
    protected static int coinReceptableCapacity = 1000;
    protected static int storageBinCapacity = 1000;
    protected static int popRackCapacity = 15;
    protected static int displayCharacters = 30;

    /**
     * Creates a standard arrangement for the vending machine. All the
     * components are created and interconnected.
     * 
     * @param coinValues
     *            The values (in cents) of each kind of coin. No specific check
     *            is made that these are all different, or arranged in any
     *            manner.
     * @param popCosts
     *            The cost (in cents) of each kind of pop. These can all be the
     *            same. The size of the array is used to indicate the number of
     *            pop racks and selection buttons; it must correspond to the pop
     *            names.
     * @param popNames
     *            The names of each kind of pop. These can all be the same. The
     *            size of the array must correspond to the size of the popCosts
     *            array.
     * @throws SimulationException
     *             if any of the arguments is null, or the size of popCosts and
     *             popNames differ.
     */
    public HardwareSimulator(int[] coinValues, int[] popCosts, String[] popNames) {
	if(coinValues == null || popCosts == null || popNames == null)
	    throw new SimulationException("Arguments may not be null");

	if(popCosts.length != popNames.length)
	    throw new SimulationException("Pop costs and names must be of same length");

	display = new DisplaySimulator();

	coinSlot = new CoinSlotSimulator(coinValues);
	receptacle = new CoinReceptacleSimulator(coinReceptableCapacity);
	storageBin = new CoinReceptacleSimulator(storageBinCapacity);
	deliveryChute = new DeliveryChuteSimulator(deliveryChuteCapacity);
	
	popCanRacks = new PopCanRackSimulator[popNames.length];
	for(int i = 0; i < popNames.length; i++) {
	    popCanRacks[i] = new PopCanRackSimulator(popRackCapacity, popCosts[i]);
	    popCanRacks[i].connect(new PopCanChannelSimulator(deliveryChute));
	}

	buttons = new SelectionButtonSimulator[popNames.length];
	for(int i = 0; i < popNames.length; i++)
	    buttons[i] = new SelectionButtonSimulator();
	returnButton = new SelectionButtonSimulator();
	coinSlot.connect(new CoinChannelSimulator(receptacle), new CoinChannelSimulator(deliveryChute));
	receptacle.connect(null, new CoinChannelSimulator(deliveryChute), new CoinChannelSimulator(storageBin));

	outOfOrderLight = new IndicatorLightSimulator();
	
	receptacle.register(display);
	returnButton.register(receptacle);
	for (PopCanRackSimulator rack: popCanRacks)
		rack.register(display);
		storageBin.register(this);
	for (SelectionButtonSimulator button: buttons)
		button.register(this);
	
    }

    /**
     * Disables all the components of the hardware that involve physical
     * movements. Activates the out of order light.
     */
    public void enableSafety() {
	safetyOn = true;
	coinSlot.disable();
	// TODO: actually remove this
	//coins entered need to be returned, so this cannot be disabled
	//deliveryChute.disable();
	
	display.display("Out of order");

	for(int i = 0; i < popCanRacks.length; i++)
	    popCanRacks[i].disable();

	outOfOrderLight.activate();
    }

    /**
     * Enables all the components of the hardware that involve physical
     * movements. Deactivates the out of order light.
     */
    public void disableSafety() {
	safetyOn = false;
	coinSlot.enable();
	deliveryChute.enable();

	for(int i = 0; i < popCanRacks.length; i++)
	    popCanRacks[i].enable();

	outOfOrderLight.deactivate();
    }

    /**
     * Returns whether the safety is currently engaged.
     */
    public boolean isSafetyEnabled() {
	return safetyOn;
    }

    /**
     * Returns the out of order light.
     */
    public IndicatorLightSimulator getOutOfOrderLight() {
	return outOfOrderLight;
    }

    /**
     * Returns a selection button at the indicated index.
     * 
     * @param index
     *            The index of the desired selection button.
     * @throws IndexOutOfBoundsException
     *             if the index < 0 or the index >= number of selection buttons.
     */
    public SelectionButtonSimulator getSelectionButton(int index) {
	return buttons[index];
    }

    /**
     * Returns the number of selection buttons.
     */
    public int getNumberOfSelectionButtons() {
	return buttons.length;
    }
    
    public SelectionButtonSimulator getReturnButton() {
    	return returnButton;
    }

    /**
     * Returns the coin slot.
     */
    public CoinSlotSimulator getCoinSlot() {
	return coinSlot;
    }

    /**
     * Returns the coin receptacle.
     */
    public CoinReceptacleSimulator getCoinReceptacle() {
	return receptacle;
    }

    /**
     * Returns the storage bin.
     */
    public CoinReceptacleSimulator getStorageBin() {
	return storageBin;
    }

    /**
     * Returns the delivery chute.
     */
    public DeliveryChuteSimulator getDeliveryChute() {
	return deliveryChute;
    }


    /**
     * Returns the number of pop can racks.
     */
    public int getNumberOfPopCanRacks() {
	return popCanRacks.length;
    }

    /**
     * Returns a pop can rack at the indicated index.
     * 
     * @param index
     *            The index of the desired pop can rack.
     * @throws IndexOutOfBoundsException
     *             if the index < 0 or the index >= number of pop can rack.
     */
    public PopCanRackSimulator getPopCanRack(int index) {
	return popCanRacks[index];
    }

    /**
     * Returns the textual display.
     */
    public DisplaySimulator getDisplay() {
	return display;
    }
    

	@Override
	public void enabled(AbstractHardware<AbstractHardwareListener> hardware) {
		// Should not need to do anything when the hardware is enabled
		
	}

	@Override
	public void disabled(AbstractHardware<AbstractHardwareListener> hardware) {
		// Should not need to do anything when the hardware is disabled
		
	}

	@Override
	public void coinAdded(CoinReceptacleSimulator receptacle, Coin coin) {
		// Should not need to do anything when a coin is added to a receptacle
		
	}

	@Override
	public void coinsRemoved(CoinReceptacleSimulator receptacle) {
		// Should not need to do anything when coins are removed from a receptacle
		
	}

	@Override
	public void coinsFull(CoinReceptacleSimulator receptacle) {
		// When the receptacle is full, disable things
		enableSafety();
	}

	@Override
	public void enabled(CoinReceptacleSimulator receptacle) {
		// Should not need to do anything when the receptacle is enabled
		
	}

	@Override
	public void disabled(CoinReceptacleSimulator receptacle) {
		// Should not need to do anything when the receptacle is disabled
		
	}

	@Override
	public void pressed(SelectionButtonSimulator button) {
		// TODO implement this
		// match button to an element in the buttons array
		// get pop rack from popCanRacks at the same index as the button in the button array
		// get price of pop in that rack
		// get value of coins in the receptacle
		// if the value of coins in the receptacle >= price of pop
		// store coins in receptacle
		// dispense pop
		// otherwise
		// change display message to price of pop
		// after five seconds change message back
		// (see the popEmpty in display for an example of how to do this)
		
		// use loop to find the index of the pressed button for dispensing the correct pop
		int IndexOfPressedButton = 6, elementcounter = 0;

		for(SelectionButtonSimulator btn : buttons){
			if(btn == button){
				IndexOfPressedButton = elementcounter;
				break;
			}
			elementcounter++;
		}
		
		
		if(receptacle.getTotalValue()>= popCanRacks[IndexOfPressedButton].getPrice()){
			
			// sufficient amount
			// store coins to permanent storage	
			try {
				receptacle.storeCoins();
			} catch (CapacityExceededException | DisabledException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			// dispense pop to deliver chute
			try {
				getPopCanRack(elementcounter).dispensePop();
			} catch (DisabledException | EmptyException | CapacityExceededException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}else{
			
			// insufficient money
			// print the price of the selected pop for 5 second
			final String oldMsg = display.getMessage();
			Timer timer = new Timer();
			display.display('$' + Double.toString(popCanRacks[IndexOfPressedButton].getPrice() * 0.01));
			timer.schedule(new TimerTask() {
				public void run() {
					display.display(oldMsg);
				}
			}, 4000); // 4000 = time to wait in milliseconds
				
		}
}
}
